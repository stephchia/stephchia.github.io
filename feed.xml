<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://stephchia.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://stephchia.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-09-08T13:05:05+00:00</updated><id>https://stephchia.github.io/feed.xml</id><title type="html">blank</title><subtitle></subtitle><entry><title type="html">Mapping roadkill risk in Taiwan with MaxEnt</title><link href="https://stephchia.github.io/blog/2025/roadkill/" rel="alternate" type="text/html" title="Mapping roadkill risk in Taiwan with MaxEnt"/><published>2025-08-26T00:00:00+00:00</published><updated>2025-08-26T00:00:00+00:00</updated><id>https://stephchia.github.io/blog/2025/roadkill</id><content type="html" xml:base="https://stephchia.github.io/blog/2025/roadkill/"><![CDATA[<blockquote> <p>Code and data on <a href="https://github.com/stephchia/roadkill-sdm">Github</a></p> </blockquote> <p>This note demonstrates how to map roadkill risk in Taiwan using MaxEnt, a presence-only species distribution modeling (SDM) approach. We combine environmental predictors with roadkill occurrences reported by a citizen-science project to estimate a relative risk surface.</p> <p>This side project was initiated as a submission to the Taiwan Highway Bureau Data Innovative Application Competition, developed in collaboration with <a href="https://scholar.google.com/citations?user=y3MxyWEAAAAJ&amp;hl=en">Le Quang Tuan</a> and several friends.</p> <hr/> <h2 id="background">Background</h2> <p>The <a href="https://roadkill.tw/">Taiwan Roadkill Observation Network (TRON)</a> has crowd-sourced wildlife-vehicle collision observations since 2011, now accumulated 300,000+ records with species, location, date, and more (a subset of the data is released on GBIF). For a relatively small island, the spatial sampling is dense, offering strong potential for high-resolution risk mapping.</p> <p><a href="https://biodiversityinformatics.amnh.org/open_source/maxent/">MaxEnt</a> (maximum entropy) works with such presence-only data. It contrasts the environments at presence sites with background samples to estimate a smooth relative suitability surface. Here, instead of speices occurrance for distribution range mapping, we treat roadkill occurrances as presences to model the spatial pattern of relative roadkill risk (focused on the road network).</p> <hr/> <h2 id="workflow">Workflow</h2> <h3 id="data-sources-all-open-data">Data sources (all open data)</h3> <ul> <li>Occurence data: <a href="https://www.gbif.org/dataset/db09684b-0fd1-431e-b5fa-4c1532fbdb14">TRON Roadkill data on GBIF</a> (years 2011-2017, ~46,000 records)</li> <li>Modeling target: <a href="https://www.thb.gov.tw/News_Content_thbOpenData.aspx?n=13&amp;s=490">Taiwan highway network (vector)</a></li> <li>Environmental predictors: <ul> <li>Land cover: <a href="https://zenodo.org/records/7254221">WorldCover 10 m 2021 v200</a></li> <li>Vegetation: <a href="https://scidm.nchc.org.tw/dataset/best_wish9930">Atlas of Natural Vegetation in Taiwan</a> (not on Github due to file size limit)</li> </ul> </li> </ul> <h3 id="i-prepare-data">I. Prepare data</h3> <h4 id="1-initialization">1. Initialization</h4> <p>Load required libraries</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">terra</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">sp</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">dismo</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <p>Create raster template</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rast</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rast</span><span class="p">(</span><span class="n">ext</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ext</span><span class="p">(</span><span class="m">120</span><span class="p">,</span><span class="w"> </span><span class="m">122.1</span><span class="p">,</span><span class="w"> </span><span class="m">21.8</span><span class="p">,</span><span class="w"> </span><span class="m">25.4</span><span class="p">),</span><span class="w"> </span><span class="n">resolution</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.0009</span><span class="p">,</span><span class="w"> </span><span class="n">crs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"EPSG:4326"</span><span class="p">)</span><span class="w">  </span><span class="c1"># WGS84 CRS</span><span class="w">
</span></code></pre></div></div> <h4 id="2-rasterize-road-data">2. Rasterize road data</h4> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">road.vec</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">st_read</span><span class="p">(</span><span class="s2">"data_input/highway/highway.shp"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">st_transform</span><span class="p">(</span><span class="n">crs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4326</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">rasterize</span><span class="p">(</span><span class="n">rast</span><span class="p">,</span><span class="w"> </span><span class="n">touches</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">road</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <p><img src="/assets/img/post/20250826/01.png" alt="image" width="40%"/></p> <h4 id="3-prepare-land-cover-layer">3. Prepare land cover layer</h4> <p>Combine two datasets: vegetation type (for natural vegetation) and WorldCover (for other land types). Vegetation classes take precedence where available.</p> <h5 id="31-create-raster-of-taiwan-island">3.1 Create raster of Taiwan island</h5> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">taiwan.vec</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">st_read</span><span class="p">(</span><span class="s2">"data/Taiwan_diss/Taiwan_diss.shp"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">st_transform</span><span class="p">(</span><span class="n">crs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4326</span><span class="p">)</span><span class="w">
</span><span class="n">taiwan.vec</span><span class="o">$</span><span class="n">value</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="n">taiwan</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">vect</span><span class="p">(</span><span class="n">taiwan.vec</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">buffer</span><span class="p">(</span><span class="n">width</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">100</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">rasterize</span><span class="p">(</span><span class="n">rast</span><span class="p">,</span><span class="w"> </span><span class="n">field</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"value"</span><span class="p">,</span><span class="w"> </span><span class="n">background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NA</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">taiwan</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <p><img src="/assets/img/post/20250826/02.png" alt="image" width="40%"/></p> <h5 id="32-process-vegetation-data-each-integer-represent-a-vegetation-type">3.2 Process vegetation data (each integer represent a vegetation type)</h5> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vegetation.vec</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">st_read</span><span class="p">(</span><span class="s2">"data/vegetation/ACO0301000011021.shp"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">st_transform</span><span class="p">(</span><span class="n">crs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4326</span><span class="p">)</span><span class="w">
</span><span class="n">veg_levels</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">unique</span><span class="p">(</span><span class="n">vegetation.vec</span><span class="o">$</span><span class="n">FORMATION</span><span class="p">)[</span><span class="nf">c</span><span class="p">(</span><span class="m">23</span><span class="p">,</span><span class="m">19</span><span class="p">,</span><span class="m">10</span><span class="p">,</span><span class="m">9</span><span class="p">,</span><span class="m">35</span><span class="p">,</span><span class="m">17</span><span class="p">,</span><span class="m">16</span><span class="p">,</span><span class="m">38</span><span class="p">,</span><span class="m">20</span><span class="p">,</span><span class="m">7</span><span class="p">,</span><span class="m">26</span><span class="p">,</span><span class="m">37</span><span class="p">,</span><span class="m">24</span><span class="p">,</span><span class="m">15</span><span class="p">,</span><span class="w">
                                                </span><span class="m">8</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">14</span><span class="p">,</span><span class="m">32</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">29</span><span class="p">,</span><span class="m">27</span><span class="p">,</span><span class="m">18</span><span class="p">,</span><span class="m">25</span><span class="p">,</span><span class="m">30</span><span class="p">,</span><span class="m">28</span><span class="p">,</span><span class="m">12</span><span class="p">,</span><span class="m">6</span><span class="p">,</span><span class="m">33</span><span class="p">,</span><span class="m">21</span><span class="p">,</span><span class="w">
                                                </span><span class="m">13</span><span class="p">,</span><span class="m">36</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">22</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">11</span><span class="p">,</span><span class="m">31</span><span class="p">,</span><span class="m">34</span><span class="p">)]</span><span class="w">
</span><span class="n">formation_mapping</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">setNames</span><span class="p">(</span><span class="m">12</span><span class="o">:</span><span class="p">(</span><span class="m">11</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">length</span><span class="p">(</span><span class="n">veg_levels</span><span class="p">)),</span><span class="w"> </span><span class="n">veg_levels</span><span class="p">)</span><span class="w">
</span><span class="n">vegetation.vec</span><span class="o">$</span><span class="n">Formation_int</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">formation_mapping</span><span class="p">[</span><span class="n">vegetation.vec</span><span class="o">$</span><span class="n">FORMATION</span><span class="p">]</span><span class="w">
</span><span class="n">vegetation</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rasterize</span><span class="p">(</span><span class="n">vegetation.vec</span><span class="p">,</span><span class="w"> </span><span class="n">rast</span><span class="p">,</span><span class="w"> </span><span class="n">field</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Formation_int"</span><span class="p">,</span><span class="w"> </span><span class="n">background</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NA</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">vegetation</span><span class="p">)</span><span class="w"> </span><span class="c1"># left figure</span><span class="w">
</span></code></pre></div></div> <h5 id="33-process-worldcover-data-each-integer-represents-a-land-cover-type">3.3 Process WorldCover data (each integer represents a land cover type)</h5> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">worldcover</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">merge</span><span class="p">(</span><span class="n">rast</span><span class="p">(</span><span class="s2">"data/landcover/ESA_WorldCover_10m_2021_v200_N21E117_Map.tif"</span><span class="p">),</span><span class="w">
                    </span><span class="n">rast</span><span class="p">(</span><span class="s2">"data/landcover/ESA_WorldCover_10m_2021_v200_N21E120_Map.tif"</span><span class="p">),</span><span class="w">
                    </span><span class="n">rast</span><span class="p">(</span><span class="s2">"data/landcover/ESA_WorldCover_10m_2021_v200_N24E120_Map.tif"</span><span class="p">))</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">project</span><span class="p">(</span><span class="n">rast</span><span class="p">,</span><span class="w"> </span><span class="n">method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"near"</span><span class="p">)</span><span class="w">
</span><span class="n">worldcover</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">worldcover</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">taiwan</span><span class="w"> </span><span class="c1"># extract land cover data only within the island</span><span class="w">
</span><span class="n">worldcover_mapping</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">setNames</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">11</span><span class="p">,</span><span class="w">  </span><span class="nf">c</span><span class="p">(</span><span class="m">10</span><span class="p">,</span><span class="m">20</span><span class="p">,</span><span class="m">30</span><span class="p">,</span><span class="m">40</span><span class="p">,</span><span class="m">50</span><span class="p">,</span><span class="m">60</span><span class="p">,</span><span class="m">70</span><span class="p">,</span><span class="m">80</span><span class="p">,</span><span class="m">90</span><span class="p">,</span><span class="m">95</span><span class="p">,</span><span class="m">100</span><span class="p">))</span><span class="w">
</span><span class="n">values</span><span class="p">(</span><span class="n">worldcover</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">worldcover_mapping</span><span class="p">[</span><span class="nf">as.character</span><span class="p">(</span><span class="n">values</span><span class="p">(</span><span class="n">worldcover</span><span class="p">))]</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">worldcover</span><span class="p">)</span><span class="w"> </span><span class="c1"># middle figure</span><span class="w">
</span></code></pre></div></div> <h5 id="34-combine-venetation-and-worldcover-data">3.4 Combine venetation and WorldCover data</h5> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">unique</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="n">values</span><span class="p">(</span><span class="n">vegetation</span><span class="p">),</span><span class="w"> </span><span class="n">values</span><span class="p">(</span><span class="n">worldcover</span><span class="p">)))</span><span class="w">
</span><span class="n">land</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">worldcover</span><span class="w">
</span><span class="n">idx</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">which</span><span class="p">(</span><span class="o">!</span><span class="nf">is.na</span><span class="p">(</span><span class="n">values</span><span class="p">(</span><span class="n">vegetation</span><span class="p">)))</span><span class="w">
</span><span class="n">values</span><span class="p">(</span><span class="n">land</span><span class="p">)[</span><span class="n">idx</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">values</span><span class="p">(</span><span class="n">vegetation</span><span class="p">)[</span><span class="n">idx</span><span class="p">]</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">land</span><span class="p">)</span><span class="w"> </span><span class="c1"># right figure</span><span class="w">
</span><span class="n">writeRaster</span><span class="p">(</span><span class="n">land</span><span class="p">,</span><span class="w"> </span><span class="s2">"data/land.tif"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <p><img src="/assets/img/post/20250826/03.png" alt="image" width="30%"/> <img src="/assets/img/post/20250826/04.png" alt="image" width="30%"/> <img src="/assets/img/post/20250826/05.png" alt="image" width="30%"/></p> <p>(rendered in continuous color palette, but these are caterogical data)</p> <h4 id="4-create-distance-to-water-layer">4. Create “distance to water” layer</h4> <p>Compute distance to water (only for the road cells to save computation time)</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">water</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">land</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">8</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">water</span><span class="p">)</span><span class="w">
</span><span class="n">values</span><span class="p">(</span><span class="n">water</span><span class="p">)[</span><span class="n">which</span><span class="p">(</span><span class="nf">is.na</span><span class="p">(</span><span class="n">values</span><span class="p">(</span><span class="n">water</span><span class="p">)))]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="kc">FALSE</span><span class="w">

</span><span class="n">roadwater</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">water</span><span class="w">
</span><span class="n">values</span><span class="p">(</span><span class="n">roadwater</span><span class="p">)[</span><span class="n">which</span><span class="p">(</span><span class="n">values</span><span class="p">(</span><span class="n">road</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">1</span><span class="p">)]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="kc">NA</span><span class="w">
</span><span class="n">dist_to_water</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">distance</span><span class="p">(</span><span class="n">roadwater</span><span class="p">,</span><span class="w"> </span><span class="n">target</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">exclude</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span><span class="c1"># plot(dist_to_water)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">crop</span><span class="p">(</span><span class="n">dist_to_water</span><span class="p">,</span><span class="w"> </span><span class="n">ext</span><span class="p">(</span><span class="m">120.3</span><span class="p">,</span><span class="w"> </span><span class="m">120.5</span><span class="p">,</span><span class="w"> </span><span class="m">23.6</span><span class="p">,</span><span class="w"> </span><span class="m">23.8</span><span class="p">)))</span><span class="w"> </span><span class="c1"># zoom in</span><span class="w">

</span><span class="n">writeRaster</span><span class="p">(</span><span class="n">dist_to_water</span><span class="p">,</span><span class="w"> </span><span class="s2">"data/dist_to_water.tif"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <p><img src="/assets/img/post/20250826/06.png" alt="image" width="40%"/> <img src="/assets/img/post/20250826/07.png" alt="image" width="50%"/></p> <h3 id="ii-build-model">II. Build model</h3> <h4 id="1-load-required-libraries">1. Load required libraries</h4> <p>MaxEnt is implemented in Java but can be called in R through package susch as <em>dismo</em> (used here). You’ll need to download “maxent.jar” from the Maxent website and place it where <a href="https://cran.r-project.org/web/packages/dismo/index.html"><em>dismo</em></a> expect it. There are other Jave-free R packages implementing Maxent models, such as <a href="https://cran.r-project.org/web/packages/maxnet/index.html"><em>maxnet</em></a> (workflows via package <a href="https://cran.r-project.org/web/packages/ENMeval/index.html"><em>ENMeval</em></a>).</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">raster</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">dismo</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">rJava</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <h4 id="2-load-predictors-rasters">2. Load predictors (rasters)</h4> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># load data</span><span class="w">
</span><span class="n">road</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="p">(</span><span class="s2">"data/road.tif"</span><span class="p">)</span><span class="w">
</span><span class="n">pred.dWater</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="p">(</span><span class="s2">"data/dist_to_water.tif"</span><span class="p">)</span><span class="w">
</span><span class="n">pred.land</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">raster</span><span class="p">(</span><span class="s2">"data/landcover.tif"</span><span class="p">)</span><span class="w">

</span><span class="c1"># keep only grid cells on road</span><span class="w">
</span><span class="n">pred</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">stack</span><span class="p">(</span><span class="n">pred.land</span><span class="p">,</span><span class="w"> </span><span class="n">pred.dWater</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">mask</span><span class="p">(</span><span class="n">road</span><span class="p">)</span><span class="w">
</span><span class="nf">names</span><span class="p">(</span><span class="n">pred</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"landcover"</span><span class="p">,</span><span class="w"> </span><span class="s2">"dis_to_water"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <h4 id="3-load-occurance-data-roadkill-records">3. Load occurance data (roadkill records)</h4> <p>Different taxa may respond differently to the same predictors due to different habitat preference or behaviors, so it may be better to model different groups separately. Here I’m using amphibians and reptiles (herpets) as example.</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># load data</span><span class="w">
</span><span class="n">rk_herpet_raw</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="s2">"data_input/roadkill.csv"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">filter</span><span class="p">(</span><span class="n">class</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Squamata"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Amphibia"</span><span class="p">))</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">rename</span><span class="p">(</span><span class="n">lon</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">decimalLongitude</span><span class="p">,</span><span class="w"> </span><span class="n">lat</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">decimalLatitude</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">select</span><span class="p">(</span><span class="n">lon</span><span class="p">,</span><span class="w"> </span><span class="n">lat</span><span class="p">)</span><span class="w">

</span><span class="c1"># keep only points that fall on valid predictor cells</span><span class="w">
</span><span class="n">on_target</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">apply</span><span class="p">(</span><span class="o">!</span><span class="nf">is.na</span><span class="p">(</span><span class="n">extract</span><span class="p">(</span><span class="n">pred</span><span class="p">,</span><span class="w"> </span><span class="n">rk_herpet_raw</span><span class="p">)),</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">all</span><span class="p">)</span><span class="w">
</span><span class="n">rk_herpet</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rk_herpet_raw</span><span class="p">[</span><span class="n">on_target</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w">
</span></code></pre></div></div> <h4 id="4-fit-maxent-model-and-make-prediction">4. Fit MaxEnt model and make prediction</h4> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">set.seed</span><span class="p">(</span><span class="m">123</span><span class="p">)</span><span class="w">
</span><span class="n">m.herpet</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">maxent</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pred</span><span class="p">,</span><span class="w">
                   </span><span class="n">p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rk_herpet</span><span class="p">,</span><span class="w">
                   </span><span class="n">nbg</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">100000</span><span class="p">,</span><span class="w">
                   </span><span class="n">factors</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"landcover"</span><span class="p">,</span><span class="w">
                   </span><span class="n">removeDuplicates</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span><span class="n">m.herpet</span><span class="w"> </span><span class="c1"># show summary (open as an HTML page)</span><span class="w">
</span></code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">x</code>: spatial object of predictor layers</li> <li><code class="language-plaintext highlighter-rouge">factors</code>: specify which predictor layers are categorical</li> <li><code class="language-plaintext highlighter-rouge">p</code>: occurence data (roadkill records) in coordinates</li> <li><code class="language-plaintext highlighter-rouge">nbg</code>: number of background points</li> <li>By default, duplicate presences within a cell are removed to reduce sampling bias; override with <code class="language-plaintext highlighter-rouge">removeDuplicates = FALSE</code>.</li> </ul> <p>The HTML summary includes model AUC, variable contributions, threshold-based diagnostics, etc.</p> <p><img src="/assets/img/post/20250826/08.png" alt="image" width="100%"/></p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Check fitted response</span><span class="w">
</span><span class="n">response</span><span class="p">(</span><span class="n">m.herpet</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <p><img src="/assets/img/post/20250826/09.png" alt="image" width="100%"/></p> <p>The left plot shows the categorical land-cover effect (here displayed as integer codes because labels were mapped to integers). We can retreive the labels to gain insight into their effects, but I’m skipping this step since this is just a demonstration.</p> <p>The right shows the continuous effect of distance to water (in meters). Let’s focus on ~0–1 km, where risk increases as roads get closer to water, which makes sense for amphibians and reptiles. At zero, the risk drops sharply likely because many near zero distance are bridges (road over water), where terrestrial animals are relatively rare. Beyong a few kilometers, effects are probably less meaningful and may reflect data sparsity rather than true patterns.</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Predict roadkill risk</span><span class="w">
</span><span class="n">risk</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">predict</span><span class="p">(</span><span class="n">pred</span><span class="p">,</span><span class="w"> </span><span class="n">m.herpet</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">risk</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <p><img src="/assets/img/post/20250826/10.png" alt="image" width="40%"/></p> <p>You can see that such plot makes roads look nearly invisible at island scale (narrow linework). So in the next part, we are gonna make some efforts to better visualize the result.</p> <h3 id="iii-visualize-risk-predictions">III. Visualize risk predictions</h3> <p>Now let’s create interactive maps that allow zooming for details. We can also add the roadkill records onto the map to provide more background information.</p> <h4 id="load-required-libraries">Load required libraries</h4> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">sf</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">mapview</span><span class="p">)</span><span class="w"> </span><span class="c1"># interactive map</span><span class="w">
</span></code></pre></div></div> <h4 id="interactive-map--presence-points-raster">Interactive map + presence points (raster)</h4> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rk_points</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">st_as_sf</span><span class="p">(</span><span class="n">rk_herpet</span><span class="p">,</span><span class="w"> </span><span class="n">coords</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"lon"</span><span class="p">,</span><span class="w"> </span><span class="s2">"lat"</span><span class="p">),</span><span class="w"> </span><span class="n">crs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4326</span><span class="p">)</span><span class="w">

</span><span class="n">mapviewOptions</span><span class="p">(</span><span class="n">basemaps</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"CartoDB.DarkMatter"</span><span class="p">,</span><span class="w"> </span><span class="s2">"OpenStreetMap"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Esri.WorldImagery"</span><span class="p">,</span><span class="w"> </span><span class="s2">"OpenTopoMap"</span><span class="p">))</span><span class="w">
</span><span class="n">mapview</span><span class="p">(</span><span class="n">risk</span><span class="p">,</span><span class="w"> </span><span class="n">maxpixels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">9332000</span><span class="p">,</span><span class="w"> </span><span class="n">layer.name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Roadkill risk"</span><span class="p">,</span><span class="w"> </span><span class="n">na.color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"transparent"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">mapview</span><span class="p">(</span><span class="n">rk_points</span><span class="p">,</span><span class="w"> </span><span class="n">layer.name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Roadkill records (herpet)"</span><span class="p">,</span><span class="w"> </span><span class="n">cex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">.1</span><span class="p">,</span><span class="w"> </span><span class="n">col.regions</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <iframe title="interactive map" src="https://stephchia.github.io/roadkill-sdm/roadkill_risk_herpet_rast.html" width="100%" height="400" style="border:0;" loading="lazy"> </iframe> <p>In case the embedded html does not load, you should see a zoomable map like this:</p> <p><img src="/assets/img/post/20250826/11.png" alt="image" width="100%"/></p> <p>This is now better. But because rasters render as thin lines for roads, they remain hard to see at small scales. To improve readability, we convert the information into vectors (sample along road vectors and visualize smoothed segment values).</p> <h4 id="interactive-map--presence-points-vector">Interactive map + presence points (vector)</h4> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create road vector</span><span class="w">
</span><span class="n">road.vec</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">st_read</span><span class="p">(</span><span class="s2">"data_input/highway/highway.shp"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">st_transform</span><span class="p">(</span><span class="n">st_crs</span><span class="p">(</span><span class="n">risk</span><span class="p">))</span><span class="w">

</span><span class="n">get_smooth_vect</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">risk</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="c1"># extract risk values along road vectors (at vertices) from risk raster</span><span class="w">
  </span><span class="n">coords</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">st_coordinates</span><span class="p">(</span><span class="n">road.vec</span><span class="p">)</span><span class="w">
  </span><span class="n">risk.points</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">extract</span><span class="p">(</span><span class="n">risk</span><span class="p">,</span><span class="w"> </span><span class="n">coords</span><span class="p">[,</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"X"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Y"</span><span class="p">)])</span><span class="w">

  </span><span class="c1"># compute risk values of segments (midpoint average between consecutive vertices)</span><span class="w">
  </span><span class="n">risk.seg</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="p">(</span><span class="n">risk.points</span><span class="p">[</span><span class="o">-</span><span class="nf">length</span><span class="p">(</span><span class="n">risk.points</span><span class="p">)]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">risk.points</span><span class="p">[</span><span class="m">-1</span><span class="p">])</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="m">2</span><span class="w">
  </span><span class="n">valid</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="p">(</span><span class="n">coords</span><span class="p">[</span><span class="o">-</span><span class="n">nrow</span><span class="p">(</span><span class="n">coords</span><span class="p">),</span><span class="w"> </span><span class="s2">"L1"</span><span class="p">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">coords</span><span class="p">[</span><span class="m">-1</span><span class="p">,</span><span class="w"> </span><span class="s2">"L1"</span><span class="p">])</span><span class="w"> </span><span class="o">&amp;</span><span class="w">
    </span><span class="p">(</span><span class="n">coords</span><span class="p">[</span><span class="o">-</span><span class="n">nrow</span><span class="p">(</span><span class="n">coords</span><span class="p">),</span><span class="w"> </span><span class="s2">"L2"</span><span class="p">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">coords</span><span class="p">[</span><span class="m">-1</span><span class="p">,</span><span class="w"> </span><span class="s2">"L2"</span><span class="p">])</span><span class="w">
  </span><span class="n">risk.seg</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">risk.seg</span><span class="p">[</span><span class="n">valid</span><span class="p">]</span><span class="w">

  </span><span class="c1"># create line segments</span><span class="w">
  </span><span class="n">coords_from</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">coords</span><span class="p">[</span><span class="o">-</span><span class="n">nrow</span><span class="p">(</span><span class="n">coords</span><span class="p">),</span><span class="w"> </span><span class="p">][</span><span class="n">valid</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w">
  </span><span class="n">coords_to</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">coords</span><span class="p">[</span><span class="m">-1</span><span class="p">,</span><span class="w"> </span><span class="p">][</span><span class="n">valid</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w">
  </span><span class="n">segments</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lapply</span><span class="p">(</span><span class="nf">seq_along</span><span class="p">(</span><span class="n">risk.seg</span><span class="p">),</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">st_linestring</span><span class="p">(</span><span class="n">rbind</span><span class="p">(</span><span class="n">coords_from</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"X"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Y"</span><span class="p">)],</span><span class="w"> </span><span class="n">coords_to</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"X"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Y"</span><span class="p">)]))</span><span class="w">
  </span><span class="p">})</span><span class="w">

  </span><span class="c1"># compute moving average</span><span class="w">
  </span><span class="n">moving_average</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">values</span><span class="p">,</span><span class="w"> </span><span class="n">window</span><span class="p">)</span><span class="w"> </span><span class="n">stats</span><span class="o">::</span><span class="n">filter</span><span class="p">(</span><span class="n">values</span><span class="p">,</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="m">1</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">window</span><span class="p">,</span><span class="w"> </span><span class="n">window</span><span class="p">),</span><span class="w"> </span><span class="n">sides</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">as.numeric</span><span class="w">
  </span><span class="n">risk.seg.smooth</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">moving_average</span><span class="p">(</span><span class="n">risk.seg</span><span class="p">,</span><span class="w"> </span><span class="n">window</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">100</span><span class="p">)</span><span class="w">
  </span><span class="n">risk.seg.smooth</span><span class="p">[</span><span class="nf">is.na</span><span class="p">(</span><span class="n">risk.seg.smooth</span><span class="p">)]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">risk.seg</span><span class="p">[</span><span class="nf">is.na</span><span class="p">(</span><span class="n">risk.seg.smooth</span><span class="p">)]</span><span class="w">

  </span><span class="c1"># return sf object</span><span class="w">
  </span><span class="n">risk_smooth_sf</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">st_sf</span><span class="p">(</span><span class="n">geometry</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">st_sfc</span><span class="p">(</span><span class="n">segments</span><span class="p">,</span><span class="w"> </span><span class="n">crs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">st_crs</span><span class="p">(</span><span class="n">road.vec</span><span class="p">)),</span><span class="w">
                          </span><span class="n">mean_value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">risk.seg.smooth</span><span class="p">)</span><span class="w">
  </span><span class="nf">return</span><span class="p">(</span><span class="n">risk_smooth_sf</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">risk_smooth_herpet</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">get_smooth_vect</span><span class="p">(</span><span class="n">predict</span><span class="p">(</span><span class="n">pred</span><span class="p">,</span><span class="w"> </span><span class="n">m.herpet</span><span class="p">))</span><span class="w">

</span><span class="n">mapview</span><span class="p">(</span><span class="n">risk_smooth_herpet</span><span class="p">,</span><span class="w"> </span><span class="n">zcol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"mean_value"</span><span class="p">,</span><span class="w"> </span><span class="n">layer.name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Roadkill risk (herpet)"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">mapview</span><span class="p">(</span><span class="n">rk_points</span><span class="p">,</span><span class="w"> </span><span class="n">layer.name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Roadkill records (herpet)"</span><span class="p">,</span><span class="w"> </span><span class="n">cex</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="n">col.regions</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"white"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <iframe title="interactive map" src="https://stephchia.github.io/roadkill-sdm/roadkill_risk_herpet_vect.html" width="100%" height="400" style="border:0;" loading="lazy"> </iframe> <p>Now you can see the roadkill risk along highways across Taiwan. You can toggle off the roadkill records (from top left layer icon) to remove points blocking the view.</p> <p>If page doesn’t load, the expected view looks like this:</p> <p><img src="/assets/img/post/20250826/12.png" alt="image" width="100%"/></p> <hr/> <h2 id="remarks">Remarks</h2> <h3 id="practical-implications">Practical implications</h3> <p>This is just a quick prototype, so I don’t want to overinterpret the results. But with more careful model design, tuning, and bias handling, this kind of model can have practical implications for conservation:</p> <ul> <li><strong>Hotspot prioritization</strong>: The risk map can be used to flag road segments that warrent attention and could be targeted for preventive measures (fencing, speed reduction, animal passage, etc.).</li> <li><strong>Clues about causes</strong>: The fitted response indicates the environmental factors correlated to risk, which help form hypotheses about animal movement and humand-wildlife interaction.</li> </ul> <h3 id="how-this-differs-from-classic-sdm">How this differs from classic SDM</h3> <p>Traditional SDMs treat presences as places a species can persist. In roadkill risk, a “presence” is a collision event—the outcome of <strong>species occurrence × movement/crossing behavior × road design/traffic × reporting effort</strong>. Because of that, some common SDM practices may need to be adapted to this specific context. Below includes a few exmaples.</p> <h3 id="caveats-and-future-directions">Caveats and future directions</h3> <ul> <li><strong>Background bias</strong>: The default background points were sampled uniformly along roads, but reporting effort isn’t uniform—busy and accessible roads are likely reported more. A potential correction is <a href="https://onlinelibrary.wiley.com/doi/10.1111/ddi.13442">“target-group background”</a>, where we can draw background from all roadkill submissions to approximate reporting effort (i.e. contrasting the focal taxa with all species)—as in <a href="https://link.springer.com/article/10.1007/s10531-020-02083-6">Chyn et al. (2021)</a>. However, because roadkill frequency can also reflect true risk, this may absorb some signal. An alternative may be to weight background by other effort proxy (such as traffic volumn) to better reflects where people and vehicles actually are.</li> <li><strong>Duplicates records</strong>: By default, Maxent keep one occurance record per cell to account for effort bias. But for roadkill, multiple records might reflect genuine risk signal (not just effort). Keeping all records might make sense if we can have an effort weighted background.</li> <li><strong>Overfitting issue</strong>: Split train/test sets by space (and by time if possible) can give more honest output than random splits (especially in clustered data) to help avoid overfitting.</li> <li><strong>Scope of this demo</strong>: I’m using a small subset of roadkill data, highway only, and just two predictors, for demonstration. Data exists for more in-depth exploration.</li> </ul>]]></content><author><name></name></author><category term="workflow"/><category term="Maxent"/><category term="R"/><category term="SDM"/><summary type="html"><![CDATA[R workflow for mapping roadkill risk on Taiwan's highway network using MaxEnt (presence-only species distribution modeling)]]></summary></entry><entry><title type="html">Exploring insect wing venation with persistent homology</title><link href="https://stephchia.github.io/blog/2025/wing-venation-tda/" rel="alternate" type="text/html" title="Exploring insect wing venation with persistent homology"/><published>2025-07-01T00:00:00+00:00</published><updated>2025-07-01T00:00:00+00:00</updated><id>https://stephchia.github.io/blog/2025/wing-venation-tda</id><content type="html" xml:base="https://stephchia.github.io/blog/2025/wing-venation-tda/"><![CDATA[<blockquote> <p>Code &amp; Notebook on <a href="https://github.com/stephchia/wing-venation-tda">GitHub</a></p> </blockquote> <p>This post walks through a Python pipeline for analyzing insect wing venation using persistent homology, a tool from topological data analysis (TDA). By preprocessing wing images into 2D point clouds, we can detect loop structures in the venation using TDA. I demonstrate the method using wing images from a dragonfly, cicada, and grasshopper, and briefly discuss how their structural patterns are shown in persistence diagrams.</p> <p><img src="/assets/img/post/20250701/01.jpg" alt="wing1" width="40%"/> <img src="/assets/img/post/20250701/02.jpg" alt="wing2" width="15%"/> <img src="/assets/img/post/20250701/03.jpg" alt="wing3" width="25%"/></p> <h6 id="wing-photo-source-dragonfly-cicada-grasshopper">Wing photo source: <a href="https://www.istockphoto.com/photo/macro-of-a-cordulegaster-bidentatas-wings-isolated-on-white-gm465101125-32958098">Dragonfly</a>, <a href="https://www.istockphoto.com/photo/isolated-cicada-or-fairy-wings-gm177017600-19789568">Cicada</a>, <a href="https://www.shutterstock.com/image-photo/wings-migratory-locust-locusta-migratoria-isolated-497422774">Grasshopper</a></h6> <hr/> <h2 id="procedure">Procedure</h2> <p>Outline:</p> <ul> <li>Use <em>scikit-image</em> to preprocess images</li> <li>Use <em>scikit-TDA</em> (<em>ripser.py</em> and <em>persim</em>) for topological data analysis</li> </ul> <h3 id="1-process-images">1. Process images</h3> <p>Let’s use a forewing of dragonfly as the example. The image preprocessing includes the following steps:</p> <ol> <li>Load image in grayscale</li> <li>Denoise</li> <li>Convert to binary image</li> <li>Skeletonize</li> <li>Make into point cloud</li> </ol> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="n">skimage</span> <span class="kn">import</span> <span class="n">io</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">filters</span><span class="p">,</span> <span class="n">morphology</span>
<span class="kn">from</span> <span class="n">skimage.restoration</span> <span class="kn">import</span> <span class="n">denoise_bilateral</span>
<span class="kn">from</span> <span class="n">skimage.filters</span> <span class="kn">import</span> <span class="n">threshold_local</span>
<span class="kn">from</span> <span class="n">skimage.morphology</span> <span class="kn">import</span> <span class="n">skeletonize</span>
</code></pre></div></div> <h4 id="11-load-image-in-grayscale">1.1 Load image in grayscale</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span> <span class="o">=</span> <span class="n">io</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="sh">"</span><span class="s">wing_dragonfly.jpg</span><span class="sh">"</span><span class="p">,</span> <span class="n">as_gray</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div> <p><img src="/assets/img/post/20250701/04.png" alt="image" width="80%"/></p> <h4 id="12-denoise">1.2 Denoise</h4> <p>The printed image might not look much different before and after denoising, but it does clean out some dots within the venation windows later in the binary image, which would likely make some difference in TDA results.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img_denoise</span> <span class="o">=</span> <span class="nf">denoise_bilateral</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">sigma_color</span><span class="o">=</span><span class="mf">0.05</span><span class="p">,</span> <span class="n">sigma_spatial</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
</code></pre></div></div> <p><img src="/assets/img/post/20250701/05.png" alt="image" width="80%"/></p> <h4 id="13-convert-to-binary-image">1.3 Convert to binary image</h4> <p>Instead of using a fixed global threshold (which may fail under uneven lighting), we apply <strong>local thresholding</strong>, which adapts based on the pixel’s neighborhood. The local threshold is computed as the weighted mean of surrounding pixels (set by <code class="language-plaintext highlighter-rouge">block_size</code>), minus a constant (<code class="language-plaintext highlighter-rouge">offset</code>).</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">local_thresh</span> <span class="o">=</span> <span class="nf">threshold_local</span><span class="p">(</span><span class="n">img_denoise</span><span class="p">,</span> <span class="n">block_size</span><span class="o">=</span><span class="mi">35</span><span class="p">,</span> <span class="n">offset</span><span class="o">=</span><span class="p">.</span><span class="mi">001</span><span class="p">)</span>
<span class="n">img_binary</span> <span class="o">=</span> <span class="n">img_denoise</span> <span class="o">&lt;</span> <span class="n">local_thresh</span>
</code></pre></div></div> <p><img src="/assets/img/post/20250701/06.png" alt="image" width="80%"/></p> <h4 id="14-skeletonize">1.4 Skeletonize</h4> <p>Skeletonization reduces each vein to a 1-pixel-wide path, preserving the structure while greatly reducing the number of points.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img_skeleton</span> <span class="o">=</span> <span class="nf">skeletonize</span><span class="p">(</span><span class="n">img_binary</span><span class="p">)</span>
</code></pre></div></div> <p><img src="/assets/img/post/20250701/07.png" alt="image" width="80%"/></p> <h4 id="15-convert-to-point-cloud">1.5 Convert to point cloud</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Get coordinates of all foreground pixels (vein areas)
</span><span class="n">points</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">column_stack</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">nonzero</span><span class="p">(</span><span class="n">img_skeleton</span><span class="p">))</span>  <span class="c1"># shape: (N, 2)
</span></code></pre></div></div> <p><img src="/assets/img/post/20250701/08.png" alt="image" width="80%"/></p> <h4 id="16-subsampling">1.6 Subsampling</h4> <p>Subsampling reduces computational cost in TDA, but there’s a trade-off: too few points may miss topological features, while too many increase runtime. Choose <code class="language-plaintext highlighter-rouge">n_sample</code> based on dataset size and analysis goals.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">points</span><span class="p">),</span> <span class="n">size</span><span class="o">=</span><span class="n">n_sample</span><span class="p">,</span> <span class="n">replace</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">points_sampled</span> <span class="o">=</span> <span class="n">points</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
</code></pre></div></div> <p><img src="/assets/img/post/20250701/09.png" alt="image" width="80%"/></p> <h3 id="2-topological-data-analysis-tda">2. Topological data analysis (TDA)</h3> <p>We use <strong>persistent homology</strong> to identify loop-like structures in the wing’s point cloud. Specifically, we apply a <strong>Vietoris–Rips filtration</strong> to extract H0 (connected components) and H1 (loops). For background, see <a href="https://www.youtube.com/watch?v=h0bnG1Wavag">intro video on TDA</a> by Matthew Wright.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">ripser</span> <span class="kn">import</span> <span class="n">ripser</span>
<span class="kn">from</span> <span class="n">persim</span> <span class="kn">import</span> <span class="n">plot_diagrams</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Rips filtration
</span><span class="n">result</span> <span class="o">=</span> <span class="nf">ripser</span><span class="p">(</span><span class="n">points_sampled</span><span class="p">,</span> <span class="n">maxdim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># setting maxdim=1 would detect H0 and H1 features
</span><span class="n">diagrams</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="sh">"</span><span class="s">dgms</span><span class="sh">"</span><span class="p">]</span>

<span class="c1"># Plot persistent diagram
</span><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="nf">plot_diagrams</span><span class="p">(</span><span class="n">diagrams</span><span class="p">,</span> <span class="n">show</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">lifetime</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div> <p><img src="/assets/img/post/20250701/10.png" alt="image" width="50%"/></p> <p>The output persistent diagram shows each detected loops in orange dot (H1), with more “significant” features (those with longer lifespan across distance threshold) locating higher up in y axis, while the less significant or noise features lower down at the bottom. From the results, I suppose the highest two orange points represent the big windows at the top left of the wing.</p> <h3 id="applying-the-workflow-to-other-insect-wings">Applying the workflow to other insect wings</h3> <p>Now I apply the same procedure to process two additional wing images.</p> <h4 id="grasshopper-hindwing">Grasshopper (hindwing)</h4> <ul> <li>Image processing</li> </ul> <p><img src="/assets/img/post/20250701/11.png" alt="image" width="100%"/></p> <ul> <li>Persistence digram</li> </ul> <p><img src="/assets/img/post/20250701/12.png" alt="image" width="50%"/></p> <h4 id="cicade-forewing">Cicade (forewing)</h4> <ul> <li>Image processing</li> </ul> <p><img src="/assets/img/post/20250701/13.png" alt="image" width="70%"/></p> <ul> <li>Persistence digram</li> </ul> <p><img src="/assets/img/post/20250701/14.png" alt="image" width="50%"/></p> <p>The 15 orange dots higher up in the persistence diagram likely correspond to the 15 distinct windows in the cicada forewing. The dots near the bottom may represent noise or small structures near the wing base.</p> <hr/> <h2 id="refleciton">Refleciton</h2> <ul> <li>Point sampling density significantly affects the persistence diagram, especially the Birth values of H1 features. Choosing the sampling level is a trade-off between computational efficiency and topological fidelity. <ul> <li>In densely sampled images (e.g. cicada), true loop structures (wing windows) tend to appear as a vertical line of H1 points with low Birth values but varying Lifetime. Those with higher Birth values are likely to represent noise.</li> <li>In contrast, sparser sampling spreads H1 features more broadly across the birth axis (e.g. grasshopper), making it harder to distinguish true biological structures from noise.</li> </ul> </li> <li>In this particular case of analyzing wing venation with TDA, the actual venation information is probably mostly captured in the lifetime of H1 features (distribution along the y-axis), whereas the birth axis reflect point sampling density and information about how likely the signals are noise.</li> </ul>]]></content><author><name></name></author><category term="workflow"/><category term="TDA"/><category term="Python"/><category term="morphology"/><category term="insect"/><summary type="html"><![CDATA[Python workflow for detecting 2D topological structures of insect wings]]></summary></entry><entry><title type="html">Phylogenetic tree with trait mapping</title><link href="https://stephchia.github.io/blog/2024/phylo-trait-plot/" rel="alternate" type="text/html" title="Phylogenetic tree with trait mapping"/><published>2024-11-30T00:00:00+00:00</published><updated>2024-11-30T00:00:00+00:00</updated><id>https://stephchia.github.io/blog/2024/phylo-trait-plot</id><content type="html" xml:base="https://stephchia.github.io/blog/2024/phylo-trait-plot/"><![CDATA[<p>==</p> <p>This note demonstrates how to visualize a phylogenetic tree with species-level trait data using R (the workflow behind Figure 4 in <a href="https://onlinelibrary.wiley.com/doi/full/10.1111/ele.14001">Hung et al. 2022</a>). The tree can be plotted in either <strong>circular</strong> or <strong>linear</strong> layout formats:</p> <p><img src="/assets/img/post/20241130/01.png" alt="image" height="280"/> <img src="/assets/img/post/20241130/02.png" alt="image" height="280"/></p> <h2 id="1-prepare-data">1. Prepare data</h2> <h3 id="11-required-libraries">1.1 Required libraries</h3> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">ggtree</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">phytools</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggnewscale</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <h3 id="12-required-datasets">1.2 Required datasets</h3> <ul> <li>A phylogenetic tree object (<code class="language-plaintext highlighter-rouge">tree</code>) in .tre format</li> <li>A species-trait dataset (<code class="language-plaintext highlighter-rouge">trait</code>) with species names matching the tree’s tip labels</li> </ul> <h3 id="13-clean-data">1.3 Clean data</h3> <p>Reorder the trait table to match the order of species in the tree:</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">is_tip</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tree</span><span class="o">$</span><span class="n">edge</span><span class="p">[,</span><span class="w"> </span><span class="m">2</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="nf">length</span><span class="p">(</span><span class="n">tree</span><span class="o">$</span><span class="n">tip.label</span><span class="p">)</span><span class="w">
</span><span class="n">ordered_tips</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tree</span><span class="o">$</span><span class="n">edge</span><span class="p">[</span><span class="n">is_tip</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">]</span><span class="w">
</span><span class="n">trait</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">trait</span><span class="p">[</span><span class="n">match</span><span class="p">(</span><span class="n">tree</span><span class="o">$</span><span class="n">tip.label</span><span class="p">[</span><span class="n">ordered_tips</span><span class="p">],</span><span class="w"> </span><span class="n">trait</span><span class="o">$</span><span class="n">Species</span><span class="p">),</span><span class="w"> </span><span class="p">]</span><span class="w">
</span></code></pre></div></div> <p>Set row names to species names for downstream compatibility:</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rownames</span><span class="p">(</span><span class="n">trait</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">trait</span><span class="o">$</span><span class="n">Species</span><span class="w">
</span></code></pre></div></div> <p>Example of cleaned-up species-trait data. Traits can be either continuous or categorical.</p> <table> <thead> <tr> <th>(rowname)</th> <th>Taxonomic group</th> <th>Trait 1</th> <th>Trait 2</th> <th>Trait 3</th> <th>Trait 4</th> <th>Trait 5</th> </tr> </thead> <tbody> <tr> <td>Scientific_name_1</td> <td>A</td> <td>428</td> <td>A</td> <td>C</td> <td>A</td> <td>0.09</td> </tr> <tr> <td>Scientific_name_2</td> <td>A</td> <td>274</td> <td>C</td> <td>D</td> <td>B</td> <td>0.08</td> </tr> <tr> <td>Scientific_name_3</td> <td>B</td> <td>331</td> <td>C</td> <td>C</td> <td>B</td> <td>0.24</td> </tr> <tr> <td>Scientific_name_4</td> <td>B</td> <td>189</td> <td>A</td> <td>B</td> <td>C</td> <td>0.11</td> </tr> <tr> <td>…</td> <td>…</td> <td>…</td> <td>…</td> <td>…</td> <td>…</td> <td>…</td> </tr> </tbody> </table> <p>In this tutorial, We’ll map:</p> <ul> <li><strong>Trait 1</strong> to tree branch color</li> <li><strong>Traits 2–5</strong> to concentric rings (using <code class="language-plaintext highlighter-rouge">gheatmap</code>)</li> <li><strong>Group</strong> to the outermost thin ring</li> </ul> <h3 id="14-optional-estimate-ancestral-state">1.4 (Optional) Estimate ancestral state</h3> <p>If we want to color the tree using ancestral trait values, we’ll need to reconstruct internal node states. Otherwise, we can plot a single colored tree and skip this part.</p> <h4 id="141-estimate-node-values">1.4.1 Estimate node values</h4> <p>For demonstration, I use <code class="language-plaintext highlighter-rouge">phytools::fastAnc()</code> to estimate ancestral node values for a continuous trait (Trait 1). Depending on the size of the dataset, this step could be very computationally intensive.</p> <p>There are a lot of tools for ancestral state reconstruction based on specific assumptions and data format. If we already have the estimated data, just import it (and sort out how to match the data format).</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">trait.1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">trait</span><span class="o">$</span><span class="n">Trait1</span><span class="w">
</span><span class="nf">names</span><span class="p">(</span><span class="n">trait.1</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">trait</span><span class="p">)</span><span class="w">
</span><span class="n">fit</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">fastAnc</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span><span class="w"> </span><span class="n">trait.1</span><span class="p">)</span><span class="w"> </span><span class="c1"># computationally intensive</span><span class="w">
</span><span class="c1"># fit &lt;- readRDS("ans_fit.rds") # or import fitted data</span><span class="w">
</span></code></pre></div></div> <h4 id="142-merge-node-values-into-the-tree-data">1.4.2 Merge node values into the tree data</h4> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tip_data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">node</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nodeid</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span><span class="w"> </span><span class="nf">names</span><span class="p">(</span><span class="n">trait.1</span><span class="p">)),</span><span class="w"> </span><span class="n">Trait1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">trait.1</span><span class="p">)</span><span class="w">
</span><span class="n">node_data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">node</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">as.numeric</span><span class="p">(</span><span class="nf">names</span><span class="p">(</span><span class="n">fit</span><span class="p">)),</span><span class="w"> </span><span class="n">Trait1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">as.numeric</span><span class="p">(</span><span class="n">fit</span><span class="p">))</span><span class="w">
</span><span class="n">data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rbind</span><span class="p">(</span><span class="n">tip_data</span><span class="p">,</span><span class="w"> </span><span class="n">node_data</span><span class="p">)</span><span class="w">
</span><span class="n">tree</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dplyr</span><span class="o">::</span><span class="n">full_join</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="p">,</span><span class="w"> </span><span class="n">by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"node"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <h2 id="2-plotting-the-tree">2. Plotting the tree</h2> <h3 id="21-basic-tree-with-trait-1-coloring">2.1 Basic Tree with Trait 1 Coloring</h3> <p>Let’s first try out the default setting (omit <code class="language-plaintext highlighter-rouge">aes(color = Trait1)</code> if not plotting ancestral values).</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ptree</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggtree</span><span class="p">(</span><span class="n">tree.plot</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Trait1</span><span class="p">),</span><span class="w"> </span><span class="n">layout</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"circular"</span><span class="p">,</span><span class="w"> </span><span class="n">ladderize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">F</span><span class="p">)</span><span class="w">
</span><span class="n">print</span><span class="p">(</span><span class="n">ptree</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <p><img src="/assets/img/post/20241130/03.png" alt="image" width="70%"/></p> <p>The default color scale may not reflect the full variation in Trait 1. Let’s customize the color scale for better contrast:</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">palette1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">RColorBrewer</span><span class="o">::</span><span class="n">brewer.pal</span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">8</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"RdYlBu"</span><span class="p">)</span><span class="w">
</span><span class="n">colors1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colorRampPalette</span><span class="p">(</span><span class="n">palette1</span><span class="p">)(</span><span class="m">100</span><span class="p">)</span><span class="w">

</span><span class="n">ptree</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggtree</span><span class="p">(</span><span class="n">tree.plot</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Trait1</span><span class="p">),</span><span class="w"> </span><span class="n">layout</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"circular"</span><span class="p">,</span><span class="w"> </span><span class="n">ladderize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">F</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">scale_colour_gradientn</span><span class="p">(</span><span class="n">colors</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">colors1</span><span class="p">,</span><span class="w"> </span><span class="n">trans</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"log"</span><span class="p">,</span><span class="w"> </span><span class="n">limits</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="m">500</span><span class="p">),</span><span class="w">
                         </span><span class="n">breaks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="m">400</span><span class="p">),</span><span class="w"> </span><span class="n">oob</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">scales</span><span class="o">::</span><span class="n">squish</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">annotate</span><span class="p">(</span><span class="s2">"rect"</span><span class="p">,</span><span class="w"> </span><span class="n">xmin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">22</span><span class="p">,</span><span class="w"> </span><span class="n">xmax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">35</span><span class="p">,</span><span class="w"> </span><span class="n">ymin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="kc">Inf</span><span class="p">,</span><span class="w"> </span><span class="n">ymax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">Inf</span><span class="p">,</span><span class="w"> </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">.1</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"black"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">annotate</span><span class="p">(</span><span class="s2">"rect"</span><span class="p">,</span><span class="w"> </span><span class="n">xmin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">60</span><span class="p">,</span><span class="w"> </span><span class="n">xmax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">76.5</span><span class="p">,</span><span class="w"> </span><span class="n">ymin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">-</span><span class="kc">Inf</span><span class="p">,</span><span class="w"> </span><span class="n">ymax</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">Inf</span><span class="p">,</span><span class="w"> </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">.1</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"black"</span><span class="p">)</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">ptree</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <p><img src="/assets/img/post/20241130/04.png" alt="image" width="70%"/></p> <p>Key elements explained:</p> <ul> <li><code class="language-plaintext highlighter-rouge">trans = "log"</code>: fit the right-skewed data distribution on the color scale</li> <li><code class="language-plaintext highlighter-rouge">"limits = c(min, max)"</code>: cap the lower and upper limit of the color scale (to manage outliers)</li> <li><code class="language-plaintext highlighter-rouge">oob = scales::squish</code>: squish extreme values into the limits (e.g. an outlier of 1,000 will be shown in the same color as 500, which is the max)</li> <li><code class="language-plaintext highlighter-rouge">breaks</code>: specify the ticks on the legend</li> </ul> <p>A red-yellow-blue color ramp is employed using the following functions:</p> <ul> <li><code class="language-plaintext highlighter-rouge">RColorBrewer::brewer.pal()</code>: create color palette (a vector of several colors)</li> <li><code class="language-plaintext highlighter-rouge">colorRampPalette()</code>: extend that color palette to a ramp of 100 colors</li> </ul> <p>I also add two rings that highlight the time period of interest (in this example, the adaptive radiation events in modern bird evolution) using <code class="language-plaintext highlighter-rouge">annotation()</code>.</p> <h3 id="22-add-triat-rings-with-gheatmap">2.2 Add triat rings with <code class="language-plaintext highlighter-rouge">gheatmap()</code></h3> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># trait 2 (categorical)</span><span class="w">
</span><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">gheatmap</span><span class="p">(</span><span class="n">ptree</span><span class="p">,</span><span class="w"> </span><span class="n">trait</span><span class="p">[,</span><span class="w"> </span><span class="s2">"Trait2"</span><span class="p">,</span><span class="w"> </span><span class="n">drop</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">F</span><span class="p">],</span><span class="w"> </span><span class="n">width</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.09</span><span class="p">,</span><span class="w"> </span><span class="n">offset</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">-2</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="p">,</span><span class="w"> </span><span class="n">font.size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">scale_fill_manual</span><span class="p">(</span><span class="n">values</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">A</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#203331"</span><span class="p">,</span><span class="w"> </span><span class="n">B</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#55949A"</span><span class="p">,</span><span class="w"> </span><span class="n">C</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#C1D9B7"</span><span class="p">))</span><span class="w">

</span><span class="c1"># trait 3 (categorical)</span><span class="w">
</span><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">new_scale_fill</span><span class="p">()</span><span class="w">
</span><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">gheatmap</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">trait</span><span class="p">[,</span><span class="w"> </span><span class="s2">"Trait3"</span><span class="p">,</span><span class="w"> </span><span class="n">drop</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">F</span><span class="p">],</span><span class="w"> </span><span class="n">width</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.09</span><span class="p">,</span><span class="w"> </span><span class="n">offset</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">8</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="p">,</span><span class="w"> </span><span class="n">font.size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">scale_fill_manual</span><span class="p">(</span><span class="n">values</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">A</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#302650"</span><span class="p">,</span><span class="w"> </span><span class="n">B</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#F3DEC0"</span><span class="p">,</span><span class="w"> </span><span class="n">C</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#DC9750"</span><span class="p">,</span><span class="w"> </span><span class="n">D</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#922C40"</span><span class="p">))</span><span class="w">

</span><span class="c1"># trait 4 (categorical)</span><span class="w">
</span><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">new_scale_fill</span><span class="p">()</span><span class="w">
</span><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">gheatmap</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">trait</span><span class="p">[,</span><span class="w"> </span><span class="s2">"Trait4"</span><span class="p">,</span><span class="w"> </span><span class="n">drop</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">F</span><span class="p">],</span><span class="w"> </span><span class="n">width</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.09</span><span class="p">,</span><span class="w"> </span><span class="n">offset</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">18</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="p">,</span><span class="w"> </span><span class="n">font.size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">scale_fill_manual</span><span class="p">(</span><span class="n">values</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">A</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#173050"</span><span class="p">,</span><span class="w"> </span><span class="n">B</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#54A2D2"</span><span class="p">,</span><span class="w"> </span><span class="n">C</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#EBAABB"</span><span class="p">))</span><span class="w">

</span><span class="c1"># trait 5 (continuous)</span><span class="w">
</span><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">new_scale_fill</span><span class="p">()</span><span class="w">
</span><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">gheatmap</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">trait</span><span class="p">[,</span><span class="w"> </span><span class="s2">"Trait5"</span><span class="p">,</span><span class="w"> </span><span class="n">drop</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">F</span><span class="p">],</span><span class="w"> </span><span class="n">width</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.08</span><span class="p">,</span><span class="w"> </span><span class="n">offset</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">28</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="p">,</span><span class="w"> </span><span class="n">font.size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">scale_fill_gradient</span><span class="p">(</span><span class="n">low</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#ede6dd"</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#4d3718"</span><span class="p">,</span><span class="w"> </span><span class="n">trans</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"log"</span><span class="p">,</span><span class="w"> </span><span class="n">breaks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">.05</span><span class="p">,</span><span class="w"> </span><span class="m">.1</span><span class="p">,</span><span class="w"> </span><span class="m">.2</span><span class="p">,</span><span class="w"> </span><span class="m">.4</span><span class="p">,</span><span class="w"> </span><span class="m">.8</span><span class="p">,</span><span class="w"> </span><span class="m">1.6</span><span class="p">))</span><span class="w">

</span><span class="c1"># taxonomic group (outer thin ring)</span><span class="w">
</span><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">new_scale_fill</span><span class="p">()</span><span class="w">
</span><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">gheatmap</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">trait</span><span class="p">[,</span><span class="w"> </span><span class="s2">"Group"</span><span class="p">,</span><span class="w"> </span><span class="n">drop</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">F</span><span class="p">],</span><span class="w"> </span><span class="n">width</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.02</span><span class="p">,</span><span class="w"> </span><span class="n">offset</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">43</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="p">,</span><span class="w"> </span><span class="n">font.size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">scale_fill_manual</span><span class="p">(</span><span class="n">values</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">P</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"gray50"</span><span class="p">,</span><span class="w"> </span><span class="n">N</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"gray80"</span><span class="p">))</span><span class="w">

</span><span class="n">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <p><img src="/assets/img/post/20241130/05.png" alt="image" width="70%"/></p> <p>Key elements explained:</p> <ul> <li><code class="language-plaintext highlighter-rouge">scale_fill_manual(values = c(A = colorA, B = colorB, C = colorC))</code>: manually assign colors to each trait values. Name the color values (colorA, …) with the trait values (A, …) in the vector.</li> <li><code class="language-plaintext highlighter-rouge">width</code>: specify the width of the ring</li> <li><code class="language-plaintext highlighter-rouge">offset</code>: adjust the distance of the ring from the central tree</li> <li><code class="language-plaintext highlighter-rouge">font.size = 0</code>: avoid showing labels</li> <li><code class="language-plaintext highlighter-rouge">ggnewscale::new_scale_fill()</code>: This is required to add a new ring with a different color scheme</li> </ul> <h3 id="alternative-linear-layout-option">[Alternative] Linear layout option</h3> <p>To switch to a traditional linear tree layout, just omit <code class="language-plaintext highlighter-rouge">layout = "circular"</code>:</p> <p><img src="/assets/img/post/20241130/02.png" alt="image" width="60%"/></p> <h2 id="3-final-touches">3. Final Touches</h2> <p>I often export the tree and customize the legend and annotations in PowerPoint for clarity:</p> <p><img src="/assets/img/post/20241130/01.png" alt="image" width="100%"/></p> <p>We can also add silhouettes or icons to tips for visual taxonomy. Check out <a href="https://www.phylopic.org/">PhyloPic</a> for public domain silhouette images.</p>]]></content><author><name></name></author><category term="workflow"/><category term="R"/><category term="visualization"/><category term="ggtree"/><category term="phylogenetics"/><category term="plot"/><summary type="html"><![CDATA[R workflow to visualize a phylogenetic tree with species-level trait data]]></summary></entry><entry><title type="html">Population matrix tutorial</title><link href="https://stephchia.github.io/blog/2024/population-matrix/" rel="alternate" type="text/html" title="Population matrix tutorial"/><published>2024-04-02T00:00:00+00:00</published><updated>2024-04-02T00:00:00+00:00</updated><id>https://stephchia.github.io/blog/2024/population-matrix</id><content type="html" xml:base="https://stephchia.github.io/blog/2024/population-matrix/"><![CDATA[<p>This material was summarized from a lecture I taught on blue crab population structure in the Population Ecology course (Spring 2024) at the University of Maryland. There were several lectures preceeding this one that provided more information in blue crab population dynamics.</p> <p>The objective is to demonstrate how we can use population matrix to explore the fate of a population under different survival, fecundity, and harvesting scenarios. This material aims to be suitable for students with limited R experience and limited familiarity with matrix manipulation.</p> <p>The blue crab life cycle, as well as the functions and parameteres used in the R tutorial, are based on <a href="https://link.springer.com/article/10.2307/1353255">Miller (2001) Matrix-based modeling of blue crab population dynamics with applications to the Chesapeake Bay.</a></p> <hr/> <h2 id="background-blue-crab-population-structure">Background: Blue crab population structure</h2> <h3 id="a-simple-example-of-blue-crab-life-cycle">A simple example of blue crab life cycle</h3> <p><img src="/assets/img/post/20240402/01.png" alt="image" width="100%"/></p> <h3 id="add-seasonal-and-spatial-dynamics">Add seasonal and spatial dynamics</h3> <p><img src="/assets/img/post/20240402/02.png" alt="image" width="100%"/></p> <p>This is what each element means:</p> <p><img src="/assets/img/post/20240402/03.png" alt="image" width="45%"/></p> <p>We can derive the summer and winter transition matrix separately by leaving only the elements specified (as the arrows) in the life cycle diagram. Replace the rest with 0.</p> <p><img src="/assets/img/post/20240402/04.png" alt="image" width="100%"/></p> <p><img src="/assets/img/post/20240402/05.png" alt="image" width="100%"/></p> <h3 id="compute-population-for-future-time-steps">Compute population for future time steps</h3> <p>Using the transition matrices and the current population data, we can compute population for the next year and the years after.</p> <p><img src="/assets/img/post/20240402/06.png" alt="image" width="100%"/></p> <p>By plugging in the parameters and functions for the matrix elements, we can then calculate the actual population sizes.</p> <p><img src="/assets/img/post/20240402/07.png" alt="image" width="100%"/></p> <hr/> <h2 id="r-tutorial">R tutorial</h2> <p>In this tutorial, we will use the transition matrices introdued above to predict blue crab population change under different scenarios. The parameters and functions for the transition matrices (<a href="https://link.springer.com/article/10.2307/1353255">Miller 2001</a>) are provided in the code.</p> <h3 id="objectives">Objectives</h3> <ol> <li>Simulate blue crab population change with the given parameters <ul> <li>Script already written. Your job is to understand the code, run it and generate result.</li> </ul> </li> <li>Explore the fate of crab population under different scenarios (“what if” questions) <ul> <li>You will need to modify the code to generate results</li> </ul> </li> </ol> <h3 id="initialization">Initialization</h3> <h4 id="set-parameters">Set parameters</h4> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.1875</span><span class="w"> </span><span class="c1"># natural mortality</span><span class="w">
</span><span class="n">mF</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.45</span><span class="w"> </span><span class="c1"># fishing mortality</span><span class="w">
</span><span class="n">dredge</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="c1"># winter dredge fishing mortality multiplier (1: same intensity as summer fishing; 0: no winter dredging)</span><span class="w">
</span><span class="n">fecundity</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1600000</span><span class="w"> </span><span class="c1"># fecundity (per capita number of offspring)</span><span class="w">
</span><span class="n">f</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.15</span><span class="w"> </span><span class="c1"># fraction of small/juvenile crabs growing into large young crabs</span><span class="w">
</span><span class="n">larva_survival</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.000001196</span><span class="w"> </span><span class="c1"># survival of larvae into juveniles</span><span class="w">
</span></code></pre></div></div> <h4 id="derive-entries-of-the-transition-matrix">Derive entries of the transition matrix</h4> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s11</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">larva_survival</span><span class="w">
</span><span class="n">s22</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="m">1</span><span class="o">-</span><span class="n">f</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="n">mN</span><span class="p">)</span><span class="w">
</span><span class="n">s32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">f</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="n">mN</span><span class="p">)</span><span class="w">
</span><span class="n">s33</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="p">(</span><span class="n">mN</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">mF</span><span class="p">))</span><span class="w">
</span><span class="n">s44</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="p">(</span><span class="n">mN</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">mF</span><span class="p">))</span><span class="w">

</span><span class="n">w13</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.66</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">fecundity</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="p">(</span><span class="n">mN</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">dredge</span><span class="o">*</span><span class="n">mF</span><span class="p">))</span><span class="w">
</span><span class="n">w14</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fecundity</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="p">(</span><span class="n">mN</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">dredge</span><span class="o">*</span><span class="n">mF</span><span class="p">))</span><span class="w">
</span><span class="n">w21</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="m">1</span><span class="o">-</span><span class="n">f</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="n">mN</span><span class="p">)</span><span class="w">
</span><span class="n">w31</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">f</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="n">mN</span><span class="p">)</span><span class="w">
</span><span class="n">w42</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="n">mN</span><span class="p">)</span><span class="w">
</span><span class="n">w43</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="p">(</span><span class="n">mN</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">dredge</span><span class="o">*</span><span class="n">mF</span><span class="p">))</span><span class="w">
</span><span class="n">w44</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="p">(</span><span class="n">mN</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">dredge</span><span class="o">*</span><span class="n">mF</span><span class="p">))</span><span class="w">
</span></code></pre></div></div> <h4 id="create-summer-transition-matrix">Create summer transition matrix</h4> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">A_summer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="n">s11</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w">   </span><span class="m">0</span><span class="p">,</span><span class="w">   </span><span class="m">0</span><span class="p">,</span><span class="w">
                         </span><span class="m">0</span><span class="p">,</span><span class="w">   </span><span class="n">s22</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w">   </span><span class="m">0</span><span class="p">,</span><span class="w">
                         </span><span class="m">0</span><span class="p">,</span><span class="w">   </span><span class="n">s32</span><span class="p">,</span><span class="w"> </span><span class="n">s33</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w">
                         </span><span class="m">0</span><span class="p">,</span><span class="w">   </span><span class="m">0</span><span class="p">,</span><span class="w">   </span><span class="m">0</span><span class="p">,</span><span class="w">   </span><span class="n">s44</span><span class="p">),</span><span class="w">
                  </span><span class="n">ncol</span><span class="o">=</span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="n">nrow</span><span class="o">=</span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="n">byrow</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="n">A_summer</span><span class="w"> </span><span class="c1"># print matrix</span><span class="w">
</span></code></pre></div></div> <h4 id="create-winter-transition-matrix">Create winter transition matrix</h4> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">A_winter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w">   </span><span class="m">0</span><span class="p">,</span><span class="w">   </span><span class="n">w13</span><span class="p">,</span><span class="w"> </span><span class="n">w14</span><span class="p">,</span><span class="w">
                         </span><span class="n">w21</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w">   </span><span class="m">0</span><span class="p">,</span><span class="w">   </span><span class="m">0</span><span class="p">,</span><span class="w">
                         </span><span class="n">w31</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w">   </span><span class="m">0</span><span class="p">,</span><span class="w">   </span><span class="m">0</span><span class="p">,</span><span class="w">
                         </span><span class="m">0</span><span class="p">,</span><span class="w">   </span><span class="n">w42</span><span class="p">,</span><span class="w"> </span><span class="n">w43</span><span class="p">,</span><span class="w"> </span><span class="n">w44</span><span class="p">),</span><span class="w">
                  </span><span class="n">ncol</span><span class="o">=</span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="n">nrow</span><span class="o">=</span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="n">byrow</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="n">A_winter</span><span class="w">
</span></code></pre></div></div> <h4 id="create-initial-population-as-a-vector-juvenile-small-young-crab-large-young-crab-adult">Create initial population as a vector (Juvenile, Small young crab, Large young crab, Adult)</h4> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">N1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="m">100</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <h3 id="simulate-population-change">Simulate population change</h3> <blockquote> <h4 id="basic-info-of-matrix-multiplication">Basic info of matrix multiplication:</h4> <ul> <li><code class="language-plaintext highlighter-rouge">%*%</code> is the operator for matrix multiplication in R</li> <li>$AB$ does not equal to $BA$</li> <li>$(AB)C$ equals to $A(BC)$</li> </ul> </blockquote> <h4 id="demonstration-of-matrix-multiplication">Demonstration of matrix multiplication</h4> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">A_summer</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">N1</span><span class="w"> </span><span class="c1"># population after a summer</span><span class="w">
</span><span class="n">A_winter</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">A_summer</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">N1</span><span class="w"> </span><span class="c1"># after 1 year</span><span class="w">
</span><span class="n">A_winter</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">A_summer</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">A_winter</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">A_summer</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">N1</span><span class="w"> </span><span class="c1"># after 2 years</span><span class="w">
</span></code></pre></div></div> <p>Alternatively</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">A</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">A_winter</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">A_summer</span><span class="w">
</span><span class="n">A</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">N1</span><span class="w"> </span><span class="c1"># after 1 year</span><span class="w">
</span><span class="n">A</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">A</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">N1</span><span class="w"> </span><span class="c1"># after 2 year</span><span class="w">
</span></code></pre></div></div> <h4 id="simulating-population-for-multiple-years">Simulating population for multiple years</h4> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># total years for simulation</span><span class="w">
</span><span class="n">year</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">20</span><span class="w">

</span><span class="c1"># create an empty matrix to store simulated population data</span><span class="w">
</span><span class="n">N</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">ncol</span><span class="o">=</span><span class="n">year</span><span class="p">,</span><span class="w"> </span><span class="n">nrow</span><span class="o">=</span><span class="m">4</span><span class="p">)</span><span class="w">

</span><span class="c1"># assign initial population for year 1 (as the first column of matrix N)</span><span class="w">
</span><span class="n">N</span><span class="p">[,</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">N1</span><span class="w">

</span><span class="c1"># simulate population change</span><span class="w">
</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">2</span><span class="o">:</span><span class="n">year</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="c1"># store each year's population in the matrix</span><span class="w">
  </span><span class="n">N</span><span class="p">[,</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">A</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">N</span><span class="p">[,</span><span class="n">i</span><span class="m">-1</span><span class="p">]</span><span class="w">

  </span><span class="c1"># print the population growth rate</span><span class="w">
  </span><span class="n">growth</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">N</span><span class="p">[,</span><span class="n">i</span><span class="p">])</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">N</span><span class="p">[,</span><span class="n">i</span><span class="m">-1</span><span class="p">])</span><span class="w">
  </span><span class="n">print</span><span class="p">(</span><span class="n">growth</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="n">N</span><span class="w"> </span><span class="c1"># print matrix</span><span class="w">
</span></code></pre></div></div> <h4 id="plot-population-by-year">Plot population by year</h4> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">N</span><span class="p">[</span><span class="m">4</span><span class="p">,],</span><span class="w"> </span><span class="n">type</span><span class="o">=</span><span class="s2">"l"</span><span class="p">,</span><span class="w"> </span><span class="n">ylim</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="nf">max</span><span class="p">(</span><span class="n">N</span><span class="p">[</span><span class="m">4</span><span class="p">,]</span><span class="o">*</span><span class="m">2</span><span class="p">)),</span><span class="w"> </span><span class="n">xlab</span><span class="o">=</span><span class="s2">"Year"</span><span class="p">,</span><span class="w"> </span><span class="n">ylab</span><span class="o">=</span><span class="s2">"N"</span><span class="p">)</span><span class="w"> </span><span class="c1"># adult</span><span class="w">
</span><span class="n">lines</span><span class="p">(</span><span class="n">N</span><span class="p">[</span><span class="m">3</span><span class="p">,],</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="s2">"red"</span><span class="p">,</span><span class="w"> </span><span class="n">lty</span><span class="o">=</span><span class="m">2</span><span class="p">)</span><span class="w"> </span><span class="c1"># add large young crab</span><span class="w">
</span><span class="n">lines</span><span class="p">(</span><span class="n">N</span><span class="p">[</span><span class="m">2</span><span class="p">,],</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="s2">"blue"</span><span class="p">,</span><span class="w"> </span><span class="n">lty</span><span class="o">=</span><span class="m">3</span><span class="p">)</span><span class="w"> </span><span class="c1"># add small young crab</span><span class="w">
</span><span class="n">lines</span><span class="p">(</span><span class="n">N</span><span class="p">[</span><span class="m">1</span><span class="p">,],</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="s2">"green"</span><span class="p">,</span><span class="w"> </span><span class="n">lty</span><span class="o">=</span><span class="m">4</span><span class="p">)</span><span class="w"> </span><span class="c1"># add larva</span><span class="w">
</span></code></pre></div></div> <h3 id="questions-can-these-strategies-stop-the-decline-of-blue-crab-population">Questions: Can these strategies stop the decline of blue crab population?</h3> <ol> <li>Can we stop the decline of blue crab population by placing restrictions on winter dredge fishing?</li> <li>What if we can double the survival rate of larvae? (keeping everything else as usual)</li> <li>What if we can double the fecundity of crab? (keeping everything else as usual)</li> <li>Given the following scenario altogether, will the population grow or decline? <ul> <li>Winter dredge fishing is completely banned (which is actually the case);</li> <li>in response, fishermen increased summer fishing mortality by 50% to compensate for the loss in winter;</li> <li>on the other hand, the warming climate has reduced winter natural mortality by 50% for all life stages.</li> </ul> </li> <li>Is the long-term population growth rate sensitive to the initial population structure (N1)?</li> <li>How does the “proportion of each life stage” change over time? (# of individuals in each life stage / total # of individuals)</li> </ol> <blockquote> <h3 id="r-notestips">R notes/tips</h3> <ul> <li>short cut for running code: ctrl + enter (Windows) or cmd + return (Mac)</li> <li>you can select multiple lines of code to run at once</li> <li>the order you run the code matters</li> <li>R is case sensitive</li> <li>click the broom (upper right corner) to clear all stored objects</li> <li>Extract matrix entry: <code class="language-plaintext highlighter-rouge">N[x,y]</code> extracts the element in row x column y in matrix N</li> <li>Exponential: <code class="language-plaintext highlighter-rouge">exp(n)</code> means e^n (where e is the Euler’s number)</li> <li>Generate number sequence: <code class="language-plaintext highlighter-rouge">1:10</code> represents a vector (a list of numbers) of 1 to 10, i.e. <code class="language-plaintext highlighter-rouge">c(1,2,3,4,5,6,7,8,9,10)</code></li> <li>Scientific number: <code class="language-plaintext highlighter-rouge">1.23e+05</code> represents 1.23<em>10^4, which is 12300. Similarly, <code class="language-plaintext highlighter-rouge">1.23e-05</code> is 1.23</em>10^-5 = 0.000123.</li> </ul> </blockquote>]]></content><author><name></name></author><category term="teaching"/><category term="R"/><category term="population"/><category term="matrix"/><category term="crab"/><summary type="html"><![CDATA[A tutorial using blue crabs as example to explore population dynamics with population matrix (with R)]]></summary></entry><entry><title type="html">Pairwise beta diversity tutorial</title><link href="https://stephchia.github.io/blog/2021/pairwise-beta/" rel="alternate" type="text/html" title="Pairwise beta diversity tutorial"/><published>2021-10-26T00:00:00+00:00</published><updated>2021-10-26T00:00:00+00:00</updated><id>https://stephchia.github.io/blog/2021/pairwise-beta</id><content type="html" xml:base="https://stephchia.github.io/blog/2021/pairwise-beta/"><![CDATA[<blockquote> <p>Note: This material was created for leading the discussion in the course Frontiers in Biodiversity Measurement (Fall 2021) at the University of Maryland.</p> </blockquote> <ul> <li>Main reference: <a href="https://esajournals.onlinelibrary.wiley.com/doi/full/10.1002/ecy.1753#support-information-section">Marion et al. (2017) Pairwise beta diversity resolves an underappreciated source of confusion in calculating species turnover.</a></li> <li>Data source for R tutorial: <a href="https://onlinelibrary.wiley.com/doi/abs/10.1111/geb.12822">Harrison et al. (2018) Phylogenetic homogenization of bee communities across ecoregions.</a></li> </ul> <hr/> <h2 id="background">Background</h2> <h3 id="beta-diversity">Beta Diversity</h3> <p>Beta diversity is the degree of differentiation among biological communities.</p> <p><img src="/assets/img/post/20211026/01.png" alt="image" width="60%"/></p> <h6 id="image-adapted-from-tamilnadu-board-12th-class-biology-textbook">Image adapted from <a href="https://cdn1.byjus.com/wp-content/uploads/2019/04/Tamilnadu-Board-Class-12-Zoology-Chapter-12.pdf">Tamilnadu Board 12th Class Biology textbook</a></h6> <p>Say $\alpha$ is the species diversity of a community, and $\gamma$ is the total species diversity of a region composed of multiple communities. For a system with $N$ communities, Beta Diversity can be defined as $\beta = \gamma/\alpha$ (<a href="https://doi.org/10.2307/1943563">Whittaker 1960</a>).</p> <p><img src="/assets/img/post/20211026/02.png" alt="image" width="70%"/></p> <p>However, as $\beta$ can range from $1$ to $N$, this measure is not comparable between systems with different $N$.</p> <h3 id="turnover-rate">Turnover Rate</h3> <p>Turnover Rate provides a more standardized measure, defined as \(T=\dfrac{\beta-1}{N-1}\) where $T$ ranges from 0 to 1. However, this measure is sensitive to sample size. Let’s look at the following example.</p> <p><img src="/assets/img/post/20211026/03.png" alt="image" width="50%"/></p> <p>In this system with 5 communities, if we have a complete sample of all sites:</p> \[N=5,\ \ T=\dfrac{\beta-1}{N-1}=\dfrac{1.25-1}{5-1}=\dfrac{1}{16}\] <p>For incomplete sampling, $T$ can be overestimated:</p> \[N=4,\ \ T=\dfrac{1.25-1}{4-1}=\dfrac{1}{12}\] \[N=3,\ \ T=\dfrac{1.25-1}{3-1}=\dfrac{1}{8}\] \[N=2,\ \ T=\dfrac{1.25-1}{2-1}=\dfrac{1}{4}\] <h3 id="pairwise-dissimilarily">Pairwise Dissimilarily</h3> <p>In order to resolve these problems, Marion et al. (2017) introduced pairwise beta diversity as a unbiased measure of species turnover. This is done by computing the turnover rate for every community pair, and then take the average.</p> <p>Let’s look at the same example as the above, with 5 communities in the system. Every community pair ($N=2$) has a turnover rate: \(N=2,\ \ T=\dfrac{1.25-1}{2-1}=\dfrac{1}{4}\)</p> <p>And then we compute the average of the observed turnover rates $\bar{T}$, which is 1/4. Even when we only sample part of the communities, the measure remains unchanged.</p> <p><img src="/assets/img/post/20211026/04.png" alt="image" width="100%"/></p> <p>An intuitive understanding of this measure $\bar{T}=1/4$ is “one out the four species present within a site is not expected to be present in a second site”.</p> <hr/> <h2 id="r-tutorial-a-comparison-between-n-community-and-mean-pairwise-dissimilarity-beta-diversity-measures">R tutorial: A comparison between N-community and mean pairwise dissimilarity beta diversity measures</h2> <p>You want to know whether urbanization can lead to ecological homogenization in bee communities. In other words: are bee communities in urban habitats more similar to each other than communities in forests or agricultural lands?</p> <p><img src="/assets/img/post/20211026/05.png" alt="image" width="90%"/></p> <p>You plan to collect samples from 12 sites, each with three habitats: agricultural, forest, and urban. That makes 36 community samples in total.</p> <p><img src="/assets/img/post/20211026/06.png" alt="image" width="60%"/></p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">ggmap</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># these are the locations of the blocks</span><span class="w">
</span><span class="n">site</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="s2">"site_data.csv"</span><span class="p">)</span><span class="w"> </span><span class="c1"># import sampling site data</span><span class="w">

</span><span class="c1"># take a look at where the 36 locations are</span><span class="w">
</span><span class="n">map</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">get_stamenmap</span><span class="p">(</span><span class="n">bbox</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="m">-78.6</span><span class="p">,</span><span class="w"> </span><span class="n">bottom</span><span class="o">=</span><span class="m">38.6</span><span class="p">,</span><span class="w"> </span><span class="n">right</span><span class="o">=</span><span class="m">-73.2</span><span class="p">,</span><span class="w"> </span><span class="n">top</span><span class="o">=</span><span class="m">43</span><span class="p">),</span><span class="w"> </span><span class="n">zoom</span><span class="o">=</span><span class="m">7</span><span class="p">)</span><span class="w">
</span><span class="n">ggmap</span><span class="p">(</span><span class="n">map</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">geom_point</span><span class="p">(</span><span class="n">site</span><span class="p">,</span><span class="w"> </span><span class="n">mapping</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">lon</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="n">lat</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="o">=</span><span class="n">lu</span><span class="p">))</span><span class="w">
</span></code></pre></div></div> <p>To test the ecological homogenization hypothesis, you want to know whether there is a lower turnover across the urban sites than across non-urban sites. You chose this turnover metric from the literature.</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># This function computes N-community turnover (based on Marion et al. (2017), q = 1)</span><span class="w">
</span><span class="c1"># The object 'comm' takes in an abundance data frame with sites as rows and species as columns</span><span class="w">
</span><span class="c1"># We use the same function to compute pairwise turnover, in that case 'comm' has only two rows</span><span class="w">
</span><span class="n">turnover</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">comm</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">pz</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">comm</span><span class="o">/</span><span class="nf">sum</span><span class="p">(</span><span class="n">comm</span><span class="p">)</span><span class="w">
  </span><span class="n">pg</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colSums</span><span class="p">(</span><span class="n">comm</span><span class="p">)</span><span class="o">/</span><span class="nf">sum</span><span class="p">(</span><span class="n">comm</span><span class="p">)</span><span class="w">
  </span><span class="n">pq</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pz</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">log</span><span class="p">(</span><span class="n">pz</span><span class="p">)</span><span class="w">
  </span><span class="n">pq</span><span class="p">[</span><span class="nf">is.na</span><span class="p">(</span><span class="n">pq</span><span class="p">)]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">0</span><span class="w">

  </span><span class="n">alpha</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="nf">sum</span><span class="p">(</span><span class="n">colSums</span><span class="p">(</span><span class="n">pq</span><span class="p">))</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="nf">log</span><span class="p">(</span><span class="n">nrow</span><span class="p">(</span><span class="n">pq</span><span class="p">)))</span><span class="w">
  </span><span class="n">gamma</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="nf">sum</span><span class="p">(</span><span class="n">pg</span><span class="p">[</span><span class="n">pg</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">0</span><span class="p">]</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">log</span><span class="p">(</span><span class="n">pg</span><span class="p">[</span><span class="n">pg</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">0</span><span class="p">])))</span><span class="w">
  </span><span class="n">beta</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">gamma</span><span class="o">/</span><span class="n">alpha</span><span class="w">

  </span><span class="n">turnover</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="p">(</span><span class="n">beta</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">nrow</span><span class="p">(</span><span class="n">comm</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w">
  </span><span class="nf">return</span><span class="p">(</span><span class="n">turnover</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># This function generates pairwise community list</span><span class="w">
</span><span class="c1"># The object 'comm' takes in an abundance data frame with sites as rows and species as columns</span><span class="w">
</span><span class="n">comm.pairs</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">comm</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">target</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">combn</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="n">nrow</span><span class="p">(</span><span class="n">comm</span><span class="p">),</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w"> </span><span class="c1"># generate all pair combinations</span><span class="w">
  </span><span class="n">pairs</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">list</span><span class="p">()</span><span class="w">
  </span><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="n">ncol</span><span class="p">(</span><span class="n">target</span><span class="p">))</span><span class="w"> </span><span class="n">pairs</span><span class="p">[[</span><span class="n">i</span><span class="p">]]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rbind</span><span class="p">(</span><span class="n">comm</span><span class="p">[</span><span class="n">target</span><span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="p">],</span><span class="w"> </span><span class="n">comm</span><span class="p">[</span><span class="n">target</span><span class="p">[</span><span class="m">2</span><span class="p">,</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="p">])</span><span class="w">
  </span><span class="nf">return</span><span class="p">(</span><span class="n">pairs</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h3 id="scenario-1">Scenario 1</h3> <p>You’ve successfully collected all 36 samples — phew!!! Now it’s time to prepare and analyze your data.</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># this is the beautiful dataset you've collected</span><span class="w">
</span><span class="n">bee</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="s2">"bee_community_data.csv"</span><span class="p">,</span><span class="w"> </span><span class="n">row.names</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w"> </span><span class="c1"># import community data</span><span class="w">
</span><span class="n">nrow</span><span class="p">(</span><span class="n">bee</span><span class="p">)</span><span class="w"> </span><span class="c1"># 36 sites in total</span><span class="w">
</span><span class="n">bee</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">6</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">6</span><span class="p">]</span><span class="w"> </span><span class="c1"># check the first few columns of the first few samples</span><span class="w">

</span><span class="c1"># separate the dataset based on habitat types</span><span class="w">
</span><span class="n">ag</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">bee</span><span class="p">[</span><span class="n">grepl</span><span class="p">(</span><span class="s2">".ag"</span><span class="p">,</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">bee</span><span class="p">),</span><span class="w"> </span><span class="n">fixed</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">),</span><span class="w"> </span><span class="p">]</span><span class="w"> </span><span class="c1"># agriculture</span><span class="w">
</span><span class="n">fo</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">bee</span><span class="p">[</span><span class="n">grepl</span><span class="p">(</span><span class="s2">".fo"</span><span class="p">,</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">bee</span><span class="p">),</span><span class="w"> </span><span class="n">fixed</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">),</span><span class="w"> </span><span class="p">]</span><span class="w"> </span><span class="c1"># forest</span><span class="w">
</span><span class="n">ur</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">bee</span><span class="p">[</span><span class="n">grepl</span><span class="p">(</span><span class="s2">".ur"</span><span class="p">,</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">bee</span><span class="p">),</span><span class="w"> </span><span class="n">fixed</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">),</span><span class="w"> </span><span class="p">]</span><span class="w"> </span><span class="c1"># urban</span><span class="w">

</span><span class="c1"># check the first few columns of these datasets (there are 12 sites each)</span><span class="w">
</span><span class="n">ag</span><span class="p">[,</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">4</span><span class="p">]</span><span class="w">
</span><span class="n">fo</span><span class="p">[,</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">4</span><span class="p">]</span><span class="w">
</span><span class="n">ur</span><span class="p">[,</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">4</span><span class="p">]</span><span class="w">
</span></code></pre></div></div> <h4 id="option-1-compute-the-n-community-turnover">Option 1: compute the N-community turnover</h4> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">turnover</span><span class="p">(</span><span class="n">ag</span><span class="p">)</span><span class="w">
</span><span class="n">turnover</span><span class="p">(</span><span class="n">fo</span><span class="p">)</span><span class="w">
</span><span class="n">turnover</span><span class="p">(</span><span class="n">ur</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <ul> <li>Q1: What can you say about the results?</li> </ul> <h4 id="option-2-compute-mean-pairwise-turnover">Option 2: compute mean pairwise turnover</h4> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## Start with the agriculture habitats</span><span class="w">
</span><span class="c1"># Step 1: generate a list of all combinations of pairwise community datasets</span><span class="w">
</span><span class="n">pairs.ag</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">comm.pairs</span><span class="p">(</span><span class="n">ag</span><span class="p">)</span><span class="w">
</span><span class="n">pairs.ag</span><span class="p">[[</span><span class="m">1</span><span class="p">]]</span><span class="w"> </span><span class="c1"># check out how the first community pair looks like</span><span class="w">
</span><span class="nf">length</span><span class="p">(</span><span class="n">pairs.ag</span><span class="p">)</span><span class="w"> </span><span class="c1"># there are 66 elements in the list, each contains a pair of communities</span><span class="w">

</span><span class="c1"># Step 2: compute turnover for each community pair</span><span class="w">
</span><span class="n">turn.ag</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sapply</span><span class="p">(</span><span class="n">pairs.ag</span><span class="p">,</span><span class="w"> </span><span class="n">turnover</span><span class="p">)</span><span class="w">
</span><span class="n">turn.ag</span><span class="w"> </span><span class="c1"># there are 66 turnover value for the 66 pairs of communities</span><span class="w">

</span><span class="c1"># Step 3: finally, compute the mean of the pairwise turnover</span><span class="w">
</span><span class="n">mean</span><span class="p">(</span><span class="n">turn.ag</span><span class="p">)</span><span class="w">

</span><span class="c1">## Do the same for the forest and urban habitats (and make it shorter)</span><span class="w">
</span><span class="n">mean</span><span class="p">(</span><span class="n">sapply</span><span class="p">(</span><span class="n">comm.pairs</span><span class="p">(</span><span class="n">fo</span><span class="p">),</span><span class="w"> </span><span class="n">turnover</span><span class="p">))</span><span class="w">
</span><span class="n">mean</span><span class="p">(</span><span class="n">sapply</span><span class="p">(</span><span class="n">comm.pairs</span><span class="p">(</span><span class="n">ur</span><span class="p">),</span><span class="w"> </span><span class="n">turnover</span><span class="p">))</span><span class="w">
</span></code></pre></div></div> <ul> <li>Q2-1: What can you say about the results?</li> <li>Q2-2: Do you reach the same conclusion as the first method?</li> </ul> <p><strong>««««««« TIME REVERSAL «««««««</strong></p> <h3 id="scenario-2">Scenario 2</h3> <p>You’re almost done with sampling — just six urban sites left. Suddenly, your state government closes the state border for pandemic control. You have no choice but to cancel the trips. Worse, there’s no sign the border will reopen soon. You reeeeeally need to wrap up this study to graduate on time. What can you do with incomplete data?</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># these are the samples you have in hand, sorry</span><span class="w">
</span><span class="n">ag</span><span class="w"> </span><span class="c1"># agriculture</span><span class="w">
</span><span class="n">fo</span><span class="w"> </span><span class="c1"># forest</span><span class="w">
</span><span class="n">ur.incomplete</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ur</span><span class="p">[</span><span class="n">sample</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">12</span><span class="p">,</span><span class="w"> </span><span class="m">6</span><span class="p">),</span><span class="w"> </span><span class="p">]</span><span class="w"> </span><span class="c1"># randomly select 6 sites from the 12 urban sites</span><span class="w">
</span><span class="n">ur.incomplete</span><span class="w">
</span></code></pre></div></div> <h4 id="option-1-go-ahead-and-compute-the-n-community-turnover-anyway">Option 1: Go ahead and compute the N-community turnover anyway</h4> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">turnover</span><span class="p">(</span><span class="n">ag</span><span class="p">)</span><span class="w">
</span><span class="n">turnover</span><span class="p">(</span><span class="n">fo</span><span class="p">)</span><span class="w">
</span><span class="n">turnover</span><span class="p">(</span><span class="n">ur.incomplete</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <ul> <li>Q3-1: What can you say about the results?</li> <li>Q3-2: Do the turnover values change with sample size? (you can try different sample size with <code class="language-plaintext highlighter-rouge">ur[sample(1:12, 'your_sample_size'), ]</code>)</li> </ul> <p>Let’s take one step forward and compute the N-community turnover of the urban samples for different sample sizes</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">turn_nc</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">matrix</span><span class="p">(</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">11</span><span class="o">*</span><span class="m">20</span><span class="p">,</span><span class="w"> </span><span class="n">ncol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">))</span><span class="w">
</span><span class="n">colnames</span><span class="p">(</span><span class="n">turn_nc</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Number_of_sites"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Turnover"</span><span class="p">)</span><span class="w">
</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">2</span><span class="o">:</span><span class="m">12</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1"># try from 2 samples to 12 samples</span><span class="w">
  </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">j</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">20</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1"># randomly sample for 20 times and compute the turnover each time</span><span class="w">
    </span><span class="n">rs</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">turnover</span><span class="p">(</span><span class="n">ur</span><span class="p">[</span><span class="n">sample</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">12</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">),</span><span class="w"> </span><span class="p">])</span><span class="w">
    </span><span class="n">turn_nc</span><span class="p">[(</span><span class="n">i</span><span class="m">-2</span><span class="p">)</span><span class="o">*</span><span class="m">20</span><span class="o">+</span><span class="n">j</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="n">rs</span><span class="p">)</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="n">boxplot</span><span class="p">(</span><span class="n">Turnover</span><span class="o">~</span><span class="n">Number_of_sites</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">turn_nc</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <ul> <li>Q3-3: Now, do you trust the results of your turnover measure? Why or why not?</li> </ul> <h4 id="option-2-youve-heard-about-this-average-pairwise-dissimilarity-thing-and-decided-to-give-it-a-try">Option 2: You’ve heard about this Average Pairwise Dissimilarity thing and decided to give it a try</h4> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mean</span><span class="p">(</span><span class="n">sapply</span><span class="p">(</span><span class="n">comm.pairs</span><span class="p">(</span><span class="n">ag</span><span class="p">),</span><span class="w"> </span><span class="n">turnover</span><span class="p">))</span><span class="w">
</span><span class="n">mean</span><span class="p">(</span><span class="n">sapply</span><span class="p">(</span><span class="n">comm.pairs</span><span class="p">(</span><span class="n">fo</span><span class="p">),</span><span class="w"> </span><span class="n">turnover</span><span class="p">))</span><span class="w">
</span><span class="n">mean</span><span class="p">(</span><span class="n">sapply</span><span class="p">(</span><span class="n">comm.pairs</span><span class="p">(</span><span class="n">ur.incomplete</span><span class="p">),</span><span class="w"> </span><span class="n">turnover</span><span class="p">))</span><span class="w">
</span></code></pre></div></div> <ul> <li>Q4-1: What can you say about the results?</li> <li>Q4-2: Do the turnover values change with sample size?</li> </ul> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># compute the mean pairwise turnover for the urban samples for different sample size</span><span class="w">
</span><span class="c1"># WARNING: this may take up to a few minutes to run</span><span class="w">
</span><span class="n">turn_pw</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">matrix</span><span class="p">(</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">11</span><span class="o">*</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">ncol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">))</span><span class="w">
</span><span class="n">colnames</span><span class="p">(</span><span class="n">turn_pw</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Number_of_sites"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Turnover"</span><span class="p">)</span><span class="w">
</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">seq</span><span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="m">12</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1"># try from 2 samples to 12 samples</span><span class="w">
  </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">j</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1"># randomly sample for 10 times and compute the turnover each time</span><span class="w">
    </span><span class="n">rs</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">sapply</span><span class="p">(</span><span class="n">comm.pairs</span><span class="p">(</span><span class="n">ur</span><span class="p">[</span><span class="n">sample</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">12</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">),</span><span class="w"> </span><span class="p">]),</span><span class="w"> </span><span class="n">turnover</span><span class="p">))</span><span class="w">
    </span><span class="n">turn_pw</span><span class="p">[(</span><span class="n">i</span><span class="m">-2</span><span class="p">)</span><span class="o">*</span><span class="m">10</span><span class="o">+</span><span class="n">j</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="n">rs</span><span class="p">)</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="n">boxplot</span><span class="p">(</span><span class="n">Turnover</span><span class="o">~</span><span class="n">Number_of_sites</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">turn_pw</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <ul> <li>Q4-3: Do you now trust your results? Why or why not?</li> </ul> <h4 id="option-3-how-about-just-discarding-the-sites-without-an-urban-sample">Option 3: how about just discarding the sites without an urban sample</h4> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># suggest these are the six urban sites you have sampled</span><span class="w">
</span><span class="n">the6sites</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sample</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="n">nrow</span><span class="p">(</span><span class="n">ur</span><span class="p">),</span><span class="w"> </span><span class="m">6</span><span class="p">)</span><span class="w">
</span><span class="n">ur.incomplete</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ur</span><span class="p">[</span><span class="n">the6sites</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w">

</span><span class="c1"># select the corresponding samples from the agricultural and forest samples</span><span class="w">
</span><span class="c1"># so that you have equal sample size among habitat types</span><span class="w">
</span><span class="n">ag.incomplete</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ag</span><span class="p">[</span><span class="n">the6sites</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w">
</span><span class="n">fo.incomplete</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">fo</span><span class="p">[</span><span class="n">the6sites</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w">

</span><span class="c1"># you can plot the locations to see what sites you've got</span><span class="w">
</span><span class="n">site.incomplete</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">site</span><span class="p">[</span><span class="nf">c</span><span class="p">(</span><span class="n">the6sites</span><span class="o">*</span><span class="m">3-2</span><span class="p">,</span><span class="w"> </span><span class="n">the6sites</span><span class="o">*</span><span class="m">3-1</span><span class="p">,</span><span class="w"> </span><span class="n">the6sites</span><span class="o">*</span><span class="m">3</span><span class="p">),</span><span class="w"> </span><span class="p">]</span><span class="w">
</span><span class="n">ggmap</span><span class="p">(</span><span class="n">map</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">geom_point</span><span class="p">(</span><span class="n">site.incomplete</span><span class="p">,</span><span class="w"> </span><span class="n">mapping</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">lon</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="n">lat</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="o">=</span><span class="n">lu</span><span class="p">))</span><span class="w">

</span><span class="c1"># compute the N-community turnover</span><span class="w">
</span><span class="n">turnover</span><span class="p">(</span><span class="n">ag.incomplete</span><span class="p">)</span><span class="w">
</span><span class="n">turnover</span><span class="p">(</span><span class="n">fo.incomplete</span><span class="p">)</span><span class="w">
</span><span class="n">turnover</span><span class="p">(</span><span class="n">ur.incomplete</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <ul> <li>Q5-1: What can you say about the results?</li> <li>Q5-2: Do you trust the results? Why or why not?</li> <li>Q5-3: Is the conclusion consistent if we have different samples? (try run the cold multiple times for the “Option 3” section)</li> <li>Q5-4: Which of the three options do you prefer? Why?</li> </ul>]]></content><author><name></name></author><category term="teaching"/><category term="R"/><category term="community"/><category term="biodiversity"/><summary type="html"><![CDATA[A tutorial explaining concept of Marion et al.'s (2017) pairwise beta diversity (with R)]]></summary></entry></feed>